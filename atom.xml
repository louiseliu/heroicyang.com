<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Heroic Yang's Blog]]></title>
  <subtitle><![CDATA[Front-Ender, love javascript and nodejs.]]></subtitle>
  <link href="http://heroicyang.com/atom.xml" rel="self"/>
  <link href="http://heroicyang.com"/>
  <updated>2013-01-29T14:15:31.975Z</updated>
  <id>http://heroicyang.com/</id>
  <author>
    <name><![CDATA[Heroic Yang]]></name>
    <email><![CDATA[heroicyang@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[深入理解JavaScript定时器（续）]]></title>
    <link href="http://heroicyang.com/2012/10/14/javascript-timer-and-event-in-depth/"/>
    <id>http://heroicyang.com/2012/10/14/javascript-timer-and-event-in-depth/</id>
    <published>2012-10-14T14:50:00.000Z</published>
    <updated>2013-01-28T15:30:02.000Z</updated>
    <content type="html"><![CDATA[<p>对于浏览器端来说，大多数事件都是异步的，但是有部分事件却不是，这部分事件称做<strong>同步事件</strong>，因此它们都是立即执行的，完全不理会前几篇文章中所提到的<strong>事件队列</strong>。以及浏览器的渲染、重绘等操作，也会打乱之前我们好不容易所建立起来的<strong>事件队列</strong>的概念。不过，本篇将会陆续不断的把这些坑给填上。  

</p>
<h2>同步事件</h2>
<h3>DOM改变事件(DOM Mutation events)</h3>
<p>下面的Demo便用于说明同步事件之一的<code>DOM Mutation events</code>（注：该事件不支持Chrome浏览器）。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;a href="http://heroicyang.com/"&gt;heroicyang.com&lt;/a&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">  var anchor = document.getElementsByTagName('a')[0];</div><br><div class="line">  anchor.onclick = function(e) {</div><div class="line">    alert('in onclick');</div><div class="line">    this.setAttribute('href', '#');</div><div class="line">    alert('out onclick');</div><div class="line">    return false;</div><div class="line">  };</div><br><div class="line">  if (anchor.addEventListener) {  //Firefox, Opera</div><div class="line">    anchor.addEventListener('DOMAttrModified', onpropchange, false);</div><div class="line">  } else if (anchor.attachEvent) {  //IE</div><div class="line">    anchor.attachEvent('onpropertychange', onpropchange);</div><div class="line">  }</div><br><div class="line">  function onpropchange() {</div><div class="line">    alert('onpropchange');</div><div class="line">  }</div><div class="line">&lt;/script&gt;</div></code></pre></td></tr></table></figure><br><span id="more"></span>
当<code>click</code>事件触发时，其处理的顺序依次为：

</p>
<ol>
<li>alert <code>in onclick</code>  </li>
<li>超链接的属性立即被改变，并alert <code>onpropchange</code>  </li>
<li>继续执行<code>onclick</code>事件处理程序中剩下的 <code>alert(&#39;out onclick&#39;);</code>  </li>
</ol>
<p><img src="http://img.heroicyang.com/synchronous-mutation-events.png" alt=""><br>关于<code>DOM Mutation events</code>，详情请参见：<br><a href="https://developer.mozilla.org/en-US/docs/DOM/Mutation_events"><a href="https://developer.mozilla.org/en-US/docs/DOM/Mutation_events">https://developer.mozilla.org/en-US/docs/DOM/Mutation_events</a></a><br><a href="http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents"><a href="http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents">http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents</a></a>  

</p>
<h3>嵌套的DOM事件</h3>
<p>在浏览器端，有一些方法会立即触发某类事件，而这类事件也是同步的。比如<code>element.focus()</code>，下面是演示代码。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"click me"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> btn = document.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>]</div><div class="line">    , text = document.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">1</span>];</div><br><div class="line">  btn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    console.log(<span class="string">'in onclick'</span>);</div><div class="line">    text.focus();</div><div class="line">    console.log(<span class="string">'out onclick'</span>);</div><div class="line">  };</div><br><div class="line">  text.onfocus = <span class="keyword">function</span>(e) {</div><div class="line">    console.log(<span class="string">'onfocus'</span>);</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure><br>执行结果如下：

</p>
<p><img src="http://img.heroicyang.com/synchronous-focus-event.png" alt="">  

</p>
<p>常规情况下，事件处理都是一个一个执行的，而我们也就假定一个事件开始时，前一个事件是执行完毕了的。而以上这些同步事件不仅打破了我们的常规认识，还会给我们带来一些负面效应。不过我们依旧可以使用<a href="http://heroicyang.com/blog/javascript-timer-in-depth.html">上一篇</a>中所使用的<code>setTimeout(func, 0)</code>来解决。  

</p>
<h2>JavaScript执行与页面渲染</h2>
<p>大多数浏览器中，JavaScript的执行和页面渲染是互斥的，于是JavaScript执行时，浏览器就不会做任何的页面渲染。比如下面的Demo...  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en-US"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>JavaScript执行与页面渲染<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"></div><div class="line">    <span class="id">#container</span> <span class="rules">{</div><div class="line">      <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200</span>px;</span></span> </div><div class="line">      <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>px;</span></span> </div><div class="line">      <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#A00000</span>;</span></span> </div><div class="line">      <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">10</span>px;</span></span></div><div class="line">    <span class="rule">}</span></span></div><div class="line">  </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"run"</span> <span class="attribute">id</span>=<span class="value">"run"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">    <span class="keyword">var</span> runBtn = document.getElementById(<span class="string">'run'</span>)</div><div class="line">      , container = document.getElementById(<span class="string">'container'</span>);</div><div class="line">    </div><div class="line">    runBtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0xA00000</span>; i &lt; <span class="number">0xFFFFFF</span>; i++) {</div><div class="line">        container.style.backgroundColor = <span class="string">'#'</span> + i.toString(<span class="number">16</span>);</div><div class="line">      }</div><div class="line">    };</div><div class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></div></code></pre></td></tr></table></figure>
</p>
<iframe src="http://sample.heroicyang.com/repaint.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; width: 90%; height:150px; padding: 1px;"></iframe>

<p>运行上面的Demo后，大多数浏览器都会假死了，直到<code>container</code>的背景颜色变更为<code>#FFFFFF</code>后才恢复。而有的浏览器(如Firefox)还会弹出警告，告知JavaScript没有响应，是终止还是等待。但是Opera却能正常运行，并不断更改背景颜色。因此不同浏览器对页面渲染和JavaScript执行的实现方式是不一样的。  

</p>
<p>关于这方面有很大的学问，还需要继续学习，慢慢摸索。So...这个就点到为止了。

</p>
<h3>模式对话框的同步调用</h3>
<p>浏览器提供的如<code>alert</code>等的模式对话框是同步调用的，所以当这类对话框工作时，会停止<code>JavaScript线程</code>，当然如页面渲染等活动也将被冻结。继续下面的Demo…当运行代码下面的<code>iframe</code>中的进度条后，无论是点击<code>主窗体中的alert</code>按钮，还是点击<code>iframe中的alert</code>按钮，都会导致进度条挂起。  

</p>
<p><input type="button" value="主窗体中的alert" onclick="alert('主窗体对话框');">
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;div id=<span class="string">"container"</span> style=<span class="string">"width: 0px; height: 20px; background-color: #A00000;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"run"</span> <span class="attribute">id</span>=<span class="value">"run"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"stop"</span> <span class="attribute">id</span>=<span class="value">"stop"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"iframe中的alert"</span> <span class="attribute">onclick</span>=<span class="value">"alert('iframe中的对话框');"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> runBtn = document.getElementById(<span class="string">'run'</span>)</div><div class="line">    , stopBtn = document.getElementById(<span class="string">'stop'</span>)</div><div class="line">    , container = document.getElementById(<span class="string">'container'</span>);</div><div class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><br><div class="line">  runBtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    timer = setInterval(<span class="keyword">function</span>() {</div><div class="line">      <span class="keyword">var</span> style = container.style;</div><div class="line">      style.width = (parseInt(style.width) + <span class="number">2</span>) % <span class="number">400</span> + <span class="string">'px'</span>;</div><div class="line">    }, <span class="number">50</span>);</div><div class="line">  };</div><div class="line">  stopBtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    clearInterval(timer);</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure>
</p>
<iframe src="http://sample.heroicyang.com/modal-sync.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; width: 90%; height:70px; padding: 1px;"></iframe>  

<p>因此，浏览器所提供的<code>alert</code>、<code>confirm</code>、<code>prompt</code>这三类模式对话框，都会阻塞<code>JavaScript线程</code>和<code>UI线程</code>。  

</p>
<p><strong>依旧，Opera有一点点的例外。。。</strong>  

</p>
<p>在Opera中，点击<code>主窗体中的alert</code>按钮不会阻塞<code>iframe</code>中的进度条。。。又打破我们的常规认识啊：同一个页面上，<code>iframe</code>是和主窗体同一个线程的。但Opera的设计并非如此。。。  

</p>
<h2>当脚本需要花很长的时间干复杂的工作时</h2>
<p>类似的就是前面那个阻塞我们浏览器的，频繁更改<code>container</code>背景颜色的例子。最后，我们还是用<a href="http://heroicyang.com/blog/javascript-timer-in-depth.html">上一篇文章中</a>的<code>setTimeout(func, 0)</code>来解决它吧。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;div id=<span class="string">"container"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"run"</span> <span class="attribute">id</span>=<span class="value">"run"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"stop"</span> <span class="attribute">id</span>=<span class="value">"stop"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> runBtn = document.getElementById(<span class="string">'run'</span>)</div><div class="line">    , stopBtn = document.getElementById(<span class="string">'stop'</span>)</div><div class="line">    , container = document.getElementById(<span class="string">'container'</span>);</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0xA00000</span>, timer = <span class="literal">null</span>;</div><br><div class="line">  runBtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> {</span></div><div class="line">      timer = setTimeout(run, <span class="number">0</span>);</div><div class="line">      container.style.backgroundColor = <span class="string">'#'</span> + i.toString(<span class="number">16</span>);</div><br><div class="line">      <span class="keyword">if</span> (i++ == <span class="number">0xFFFFFF</span>) stop();</div><div class="line">    }</div><div class="line">    timer = setTimeout(run, <span class="number">0</span>);</div><div class="line">  };</div><div class="line">  stopBtn.onclick = stop;</div><br><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">()</span> {</span></div><div class="line">    clearTimeout(timer);</div><div class="line">  }</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure>
</p>
<iframe src="http://sample.heroicyang.com/heavy-jobs.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; width: 90%; height:150px; padding: 1px;"></iframe>  

<p>最后，总结一下<code>setTimeout(func, 0)</code>的使用场景吧：

</p>
<ol>
<li>让浏览器渲染当前的变化  </li>
<li>避免长时间运行的脚本  </li>
<li>流程控制  </li>
<li>等等等等。。。</li>
</ol>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/javascript-timer/" term="javascript timer"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[深入理解JavaScript定时器]]></title>
    <link href="http://heroicyang.com/2012/09/22/javascript-timer-in-depth/"/>
    <id>http://heroicyang.com/2012/09/22/javascript-timer-in-depth/</id>
    <published>2012-09-22T10:57:00.000Z</published>
    <updated>2013-01-28T15:29:53.000Z</updated>
    <content type="html"><![CDATA[<p>对于浏览器内部，大部分操作都是异步的生成事件并添加到<code>JavaScript引擎线程</code>的队列中，然后由<code>JavaScript引擎线程</code>进行调度执行。因此浏览器的很多事件都是和<code>JavaScript</code>相结合的，但是也有一些内部的限制。  

</p>
<p>首先我们非常确定<code>JavaScript</code>是单线程的，对于浏览器来说，一个窗体中只有一个<code>JavaScript引擎线程</code>。而其他的行为，如：渲染、下载等是由单独的线程进行管理的，且具有不同的优先级。  

</p>
<h2>异步事件</h2>
<p>前面提到大多数事件都是异步的，触发的时候就将回调函数添加到事件队列。浏览器提供了一个内部的回路，也就是之前所谈到的<code>Event Loop</code>，由它来负责检查队列和处理事件、执行函数等。详细可参考我的<a href="http://heroicyang.com/blog/javascript-event-loop.html">前一篇博文</a>。而<code>setTimeout</code>和<code>setInterval</code>也是将其需要执行的函数添加到事件队列。  

</p>
<p><strong>事实上，大多数交互和活动都得通过事件循环。</strong><br><span id="more"></span>  
</p>
<h2>事件重叠</h2>
<p>一些情况下，会有多个事件在同一时间附加到事件队列里。  

</p>
<p>比如，<code>click</code>事件就会产生两个额外的事件：<code>mousedown</code>和<code>mouseup</code>。其中，<code>mouseup</code>和<code>click</code>事件会同时被添加到事件队列；而<code>mousedown</code>事件则很有可能会和另外一个事件重叠：<code>focus</code>。  

</p>
<h2>setTimeout(func, 0)奇巧淫技</h2>
<p>再一次解释关于<code>0ms</code>的误解：如果当前时钟周期内执行队列空闲，则立即执行该定时器，将回调函数加入到事件队列；然后等待下一个时钟周期，再执行该回调函数。不妨来看看下面的测试。

</p>
<p>这段代码在我的浏览器中执行结果如下：

</p>
<p><img src="http://img.heroicyang.com/setTimeout-Measure.png" alt="">

</p>
<p>在我本地的<code>Nodejs</code>环境中执行结果如下：  

</p>
<p><img src="http://img.heroicyang.com/setTimeout-Measure-Nodejs.png" alt="">  

</p>
<p>上面的这个测试只是想说明<code>setTimeout(func, 0)</code>定时任务的回调函数执行时间是有延迟的，而并不是所谓的立即执行。  

</p>
<p>因此，我们可以利用<code>setTimeout(func, 0)</code>来解决事件重叠所产生的负面效果，修正执行顺序。 

</p>
<h3>奇巧淫技之一：模拟浏览器的事件捕获</h3>
<p>众所周知，浏览器的DOM事件都是采用冒泡的方式，只有个别浏览器是支持事件捕获的。而在实际的开发过程中可能存在需要事件捕获的需求，要求子元素的事件在父元素触发之后才能触发。为了兼容各个浏览器，我们不能使用事件捕获，而<code>setTimeout(func, 0)</code>在这个时候就很乐意帮忙了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"click"</span> id=<span class="string">"cbtn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"result"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> cbtn = document.getElementById(<span class="string">'cbtn'</span>)</div><div class="line">    , result = document.getElementById(<span class="string">'result'</span>);</div><br><div class="line">  cbtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    setTimeout(<span class="keyword">function</span>() {</div><div class="line">      result.innerHTML += <span class="string">'input click, '</span>;</div><div class="line">    }, <span class="number">0</span>);</div><div class="line">  };</div><br><div class="line">  document.body.onclick = <span class="keyword">function</span>(e) {</div><div class="line">    result.innerHTML += <span class="string">'body click -&gt; '</span>;</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure><br>点击查看运行效果：  
</p>
<iframe src="http://sample.heroicyang.com/setTimeout01.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; width: 90%; height:80px; padding: 1px;"></iframe>

<h3>奇巧淫技之二：让浏览器更好的工作</h3>
<p>大多数情况下，我们可以在浏览器的默认行为之前对事件进行处理，但是有时我们按照常规的思路去做的时候，往往事与愿违。比如下面的例子。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"wordInput"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> wordInput = document.getElementById(<span class="string">'wordInput'</span>);</div><div class="line">  wordInput.onkeypress = <span class="keyword">function</span>(e) {</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.toUpperCase();</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure><br>看似一个很简单的需求：每输入一个字符，就将其转换为大写。但是上面的代码完全没有按照指示去做，不信你试试看：  
</p>
<iframe src="http://sample.heroicyang.com/setTimeout-toUpper-01.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; height:45px; padding: 1px;"></iframe>  

<p>如果没有下一次输入，文本框中的小写字母永远都不会转换为大写。Why? 因为浏览器在<code>keypress</code>事件处理的时候，还没有将我们输入的值添加到文本框。于是乎换一个事件来handle然后再处理吧，既然键按下的时候还木有值，那就等键弹起来之后再处理。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"wordInput"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> wordInput = document.getElementById(<span class="string">'wordInput'</span>);</div><div class="line">  wordInput.onkeyup = <span class="keyword">function</span>(e) {</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.toUpperCase();</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure><br>运行试试吧。
</p>
<iframe src="http://sample.heroicyang.com/setTimeout-toUpper-02.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; height:45px; padding: 1px;"></iframe>  

<p>大概似乎是可行了，可是仔细观察就看出问题了。<code>keyup</code>事件触发时，文本框已经具备完整的值了，但先是一个小写的值，键完全释放之后转变为大写。这不科学…这太丑陋...  

</p>
<p>是时候关门放出<code>setTimeout(func, 0)</code>了。。。
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div></code></pre></td><td class="code"><pre><code><div class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"wordInput"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></div><div class="line">  <span class="keyword">var</span> wordInput = document.getElementById(<span class="string">'wordInput'</span>);</div><div class="line">  wordInput.onkeypress = <span class="keyword">function</span>(e) {</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    setTimeout(<span class="keyword">function</span>() {</div><div class="line">      self.value = self.value.toUpperCase();</div><div class="line">    }, <span class="number">0</span>);</div><div class="line">  };</div><div class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></div></code></pre></td></tr></table></figure>  
</p>
<iframe src="http://sample.heroicyang.com/setTimeout-toUpper-03.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; height:45px; padding: 1px;"></iframe>  

<p>已经完美了。<code>keypress</code>事件触发时，将转换大写的操作添加到事件队列，紧接着浏览器添加我们输入的值，然后近乎0延迟的执行我们的转换大写操作函数。  

</p>
<p>上面两个小案例只是冰山一角，so...合理利用<code>setTimeout(func, 0)</code>，明天更美好！</p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/javascript-timer/" term="javascript timer"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[理解JavaScript定时器：setTimeout和setInterval]]></title>
    <link href="http://heroicyang.com/2012/09/06/javascript-timers/"/>
    <id>http://heroicyang.com/2012/09/06/javascript-timers/</id>
    <published>2012-09-06T14:56:00.000Z</published>
    <updated>2013-01-28T15:29:43.000Z</updated>
    <content type="html"><![CDATA[<p><strong>定时器其实并不是<code>JavaScript</code>提供的，而是由浏览器（对于前端来说）提供的。</strong>所以<code>setTimeout()</code>和<code>setInterval()</code>这两个方法均是通过浏览器的顶层对象<code>window</code>进行调用，可能平时大家在使用的过程中也会省去<code>window</code>而直接使用这两个方法。  

</p>
<p>这两个方法所接收的参数都一样：  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div></code></pre></td><td class="code"><pre><code><div class="line">setTimeout(func|code, delay);</div><div class="line">setInterval(func|code, delay);</div></code></pre></td></tr></table></figure><br>这两个方法总是被简单的认为：在多少毫秒之后就执行里面的函数或者每间隔多少毫秒就执行里面的函数，基于这种理解的话会遇到很多匪夷所思的坑。而结合<a href="http://heroicyang.com/blog/javascript-event-loop.html">上篇文章</a>中所提到的执行队列来解释的话，很多疑问都可以迎刃而解。

</p>
<p>前者：在指定的毫秒数后，将定时任务处理函数（<code>func|code</code>）添加到执行队列的队尾。  

</p>
<p>后者：按照指定的周期（以毫秒计），将定时任务处理函数（<code>func|code</code>）添加到执行队列的队尾。<br><span id="more"></span>
下面分别使用了<code>setInterval</code>和<code>setTimeout</code>来实现同一个功能，可运行查看效果。 

</p>
<iframe src="http://sample.heroicyang.com/timer.html" style="border: 1px solid #DDD; border-radius: 3px; background: #F8F8F8; height:80px;"></iframe>

<p>这是相应的源代码：<a href="http://code.heroicyang.com/timer.html" target="_blank">传送门</a>  

</p>
<p><strong>接下来继续填<code>setInterval</code>的坑。</strong>  

</p>
<p>假设定时器的上一个回调执行完到下一个回调开始的这段时间为时间间隔，那么对于<code>setTimeout</code>来说，这个时间间隔理论上是应该<code>&gt;=delay</code>；而对于<code>setInterval</code>来说，这个时间间隔理论上是应该<code>&lt;=delay</code>的。

</p>
<p>但事实总会有出人意料的地方，<code>setInterval</code>就是那个制造意外的东西。   

</p>
<p>以下是常规的代码：   
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> endTime = <span class="literal">null</span>;</div><div class="line">setInterval(count, <span class="number">200</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">var</span> elapsedTime = endTime ? (<span class="keyword">new</span> Date() - endTime) : <span class="number">200</span>;</div><div class="line">  i++;</div><div class="line">  console.log(<span class="string">'current count: '</span> + i + <span class="string">'.'</span> + <span class="string">'elapsed time: '</span> + elapsedTime + <span class="string">'ms'</span>);</div><div class="line">  endTime = <span class="keyword">new</span> Date();</div><div class="line">}</div></code></pre></td></tr></table></figure><br>其执行结果也比较符合理论时间，见下图。

</p>
<p><img src="http://img.heroicyang.com/setInterval1.png" alt="">   

</p>
<p>接下来修改代码，让<code>count()</code>方法的执行时间变长一点：  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">var</span> elapsedTime = endTime ? (<span class="keyword">new</span> Date() - endTime) : <span class="number">200</span>;</div><div class="line">  i++;</div><div class="line">  console.log(<span class="string">'current count: '</span> + i + <span class="string">'.'</span> + <span class="string">'elapsed time: '</span> + elapsedTime + <span class="string">'ms'</span>);</div><div class="line">  sleep(<span class="number">100</span>); <span class="comment">//sleep 100ms</span></div><div class="line">  endTime = <span class="keyword">new</span> Date();</div><div class="line">}</div></code></pre></td></tr></table></figure>
执行结果如下：

</p>
<p><img src="http://img.heroicyang.com/setInterval2.png" alt="">

</p>
<p>结合执行队列，可以用下图对上面两种情况进行直观的解释：

</p>
<p><img src="http://img.heroicyang.com/setInterval1-explain.png" alt="">   

</p>
<p>接下来再次修改代码，让<code>count()</code>方法的执行时间更长，设定为<code>setInterval</code>中<code>delay</code>的<code>2</code>倍，即<code>400ms</code>：  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">var</span> elapsedTime = endTime ? (<span class="keyword">new</span> Date() - endTime) : <span class="number">200</span>;</div><div class="line">  i++;</div><div class="line">  console.log(<span class="string">'current count: '</span> + i + <span class="string">'.'</span> + <span class="string">'elapsed time: '</span> + elapsedTime + <span class="string">'ms'</span>);</div><div class="line">  sleep(<span class="number">400</span>); <span class="comment">//sleep 400ms</span></div><div class="line">  endTime = <span class="keyword">new</span> Date();</div><div class="line">}</div></code></pre></td></tr></table></figure><br>其执行效果变为如下：

</p>
<p><img src="http://img.heroicyang.com/setInterval3.png" alt="">  

</p>
<p>意外发生了，每个回调之间的时间间隔竟然没有了，或者说缩短到非常小的间隔。事情大概是这样的：如果<code>setInterval</code>的定时时间到了，而前一个回调还没有执行完时，就会把这次的回调放在执行队列的队尾；如果<code>setInterval</code>的定时时间已经多次触发，而此时最前一个回调仍然还在执行，那么就会丢弃掉本次的回调。还是用图来直观说明吧。  

</p>
<p>这是回调处理时间比定时时间稍微长一点点的情况：

</p>
<p><img src="http://img.heroicyang.com/setInterval2-explain.png" alt="">  

</p>
<p>这是回调处理时间比定时时间长很多的情况：

</p>
<p><img src="http://img.heroicyang.com/setInterval3-explain.png" alt="">  

</p>
<p><strong>所以，如果使用<code>setInterval</code>的话，其时间间隔总是让人捉摸不定。而使用<code>setTimeout</code>嵌套，则完全可以解决这个问题，还我们一个固定的时间间隔。</strong></p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/javascript-timer/" term="javascript timer"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[JavaScript Event Loop 浅析]]></title>
    <link href="http://heroicyang.com/2012/08/28/javascript-event-loop/"/>
    <id>http://heroicyang.com/2012/08/28/javascript-event-loop/</id>
    <published>2012-08-28T14:52:00.000Z</published>
    <updated>2013-01-28T15:29:32.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习<code>Nodejs</code>的过程中深入的了解了<code>异步编程</code>这个概念，为了更好的使用<code>Nodejs</code>，这些概念不可不知。在以前作为一个<code>JavaScript</code>用户的时候，完全是不知道它是怎么运行的，对好些概念也是“知其然不知其所以然”。  

</p>
<p>对于客户端的<code>JavaScript</code>和<code>Nodejs</code>来说其实差距不是很大，这回就从客户端方面来说说<code>Event Loop</code>这个概念吧，算是<code>异步编程</code>的一个切入点吧。其实<code>jQuery</code>的作者John Resig在几年前就写了一篇好文章<a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a>，来讲述<code>timer</code>和<code>事件</code>在浏览器中是怎样工作的，我也是通过这篇文章才“知其所以然”。  

</p>
<h3>问题场景</h3>
<p>先来看看一段代码：  
</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div></code></pre></td><td class="code"><pre><code><div class="line">  &lt;a href="#" id="doBtn"&gt;do something&lt;/a&gt;</div><div class="line">  &lt;div id="status"&gt;&lt;/div&gt;</div><div class="line">  &lt;script type="text/javascript"&gt;</div><div class="line">    void function() {</div><div class="line">      var doBtn = document.getElementById('doBtn')</div><div class="line">        , status = document.getElementById('status');</div><br><div class="line">      doBtn.onclick = function(e) {</div><div class="line">        e.preventDefault();</div><br><div class="line">        status.innerText = 'doing...please wait...';  //开始啦</div><div class="line">        sleep(10000);  //模拟一个耗时较长的计算过程，10s</div><div class="line">        status.innerText = 'done';  //完成啦</div><div class="line">      };</div><div class="line">    }();</div><br><div class="line">    function sleep(ms) {</div><div class="line">      var start = new Date();</div><div class="line">      while (new Date() - start &lt;= ms) {}</div><div class="line">    }</div><div class="line">  &lt;/script&gt;</div></code></pre></td></tr></table></figure>

<p>上面代码主要想完成一个功能：按钮被点击时------&gt;显示一个状态告知用户正在干一些事情------&gt;开始干------&gt;事情干完后状态变更为已完成。<br><span id="more"></span>

</p>
<p>看上去没问题，应该是可以工作的，于是在浏览器运行这个页面。可是现实总是残忍的，没有符合预期效果。当点击按钮之后，浏览器就冻结了，用于显示状态的<code>div</code>并没有显示，界面上也没有“doing...”这个提示；经过<code>10s</code>之后，浏览器回过神了，代表耗时较长的计算已经结束，此时用于显示状态的<code>div</code>显示“done”。  

</p>
<p>究其原因：JavaScript引擎是单线程的。而此时还有必要再了解下浏览器内核都有哪些主要的常驻线程，才能解上面的疑惑。浏览器内核常驻线程大致包含以下：  

</p>
<ol>
<li>浏览器GUI渲染线程</li>
<li>JavaScript引擎线程</li>
<li>浏览器定时触发器线程</li>
<li>浏览器事件触发线程</li>
<li>浏览器http异步请求线程</li>
</ol>
<p>而GUI渲染线程和JavaScript引擎线程是互斥的，JavaScript执行时GUI渲染线程是挂起的，页面将停止一切的解析和渲染行为。上面的3、4、5类线程也会产生不同的异步事件。看下面这张图就应该比较直观了。

</p>
<p><img src="http://img.heroicyang.com/js-event-loop.png" alt="JavaScript-Event-Loop">

</p>
<p>因为JavaScript引擎是单线程的，所以代码都是先压到队列，然后由引擎采用先进先出的方式运行。事件处理函数、timer执行函数也会排到这个队列中，然后利用一个无穷回圈，不断从队头取出函数执行，这个就是<code>Event Loop</code>。  

</p>
<p>接下来还是继续用图来说明上面的代码为什么没有达到预期效果。

</p>
<p><img src="http://img.heroicyang.com/js-event-loop-1.png" alt="">

</p>
<p>于是结果就只看到了&quot;done&quot;。  

</p>
<h3>怎样解决？</h3>
<p>使用<code>setTimeout()</code>，下面是修改后的<code>onclick</code>事件处理函数：

</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div></code></pre></td><td class="code"><pre><code><div class="line">doBtn.onclick = <span class="keyword">function</span>(e) {</div><div class="line">  e.preventDefault();</div><br><div class="line">  status.innerText = <span class="string">'doing...please wait...'</span>;  <span class="comment">//开始啦</span></div><div class="line">  </div><div class="line">  setTimeout(<span class="keyword">function</span>() {</div><div class="line">    sleep(<span class="number">10000</span>);  <span class="comment">//模拟一个耗时较长的计算过程，10s</span></div><div class="line">    status.innerText = <span class="string">'done'</span>;  <span class="comment">//完成啦</span></div><div class="line">  }, <span class="number">0</span>);  <span class="comment">// 0ms delay</span></div><div class="line">};</div></code></pre></td></tr></table></figure>

<p>为什么这样就解决了呢？还是用上面的队列的图来解释。

</p>
<p><img src="http://img.heroicyang.com/js-event-loop-2.png" alt=""></p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/javascript-timer/" term="javascript timer"/>
    <category scheme="http://heroicyang.com/tags/event-loop/" term="event-loop"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[像黑客一样写博客]]></title>
    <link href="http://heroicyang.com/2012/08/26/blogging-like-a-hacker/"/>
    <id>http://heroicyang.com/2012/08/26/blogging-like-a-hacker/</id>
    <published>2012-08-26T15:24:00.000Z</published>
    <updated>2013-01-28T15:26:59.000Z</updated>
    <content type="html"><![CDATA[<p>“像黑客一样写博客”，这个标题是网络上对<code>Octopress</code>（其实应该是<code>Jekyll</code>）的评价，而这一评价是来自一篇几年前的<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">文章</a>。当我将自己的博客抹掉并重新开始的时候，我也准备以这个标题来作为这次的新起点。  

</p>
<p>其实早就有换掉<code>WordPress</code>的想法，一是因为它太臃肿了，我只是想简单的写写博客，用不着那么多强大的功能；二是它对插入代码的支持让我绝望了，每次用<code>Markdown</code>写好文章，复制其<code>HTML</code>到<code>WordPress</code>之后，都要调整好半天的样式；三是我之前的博客中太多的碎碎念之类的水文了，可谓杂、乱，并不像一个记录技术的博客。综合这些借口，我每次登录到<code>WordPress</code>后台都没有再写文章的激情。<br><span id="more"></span>
而之前我也和<a href="http://veryb.us/">fiture</a>聊到用<a href="http://heroicyang.com/blog/tags/nodejs/">Nodejs</a>来重新写个博客，也当学习练手。经过间歇性的聊聊之后，我提议说不弄数据库了，直接将文章以<code>Markdown</code>的格式<code>push</code>到<code>Github</code>吧等等的初步想法。当时我们觉得还不错，因为也没了解过有没有这样的东西存在，之后我下意识地搜了下。结果发现了<code>OctoPress</code>这个东西，了解之后感觉完全正合我意啊，所以二话不说就直接给换上了。  

</p>
<p>于是我总算是终于弃掉了<code>WordPress</code>，用上<code>Octopress</code>这个高级货，可谓得心应手。  

</p>
<p>其实我也就冲着我认为的这几点优势：

</p>
<ol>
<li>直接使用<code>Markdown</code>写文章</li>
<li>全站静态化，根据<code>Markdown</code>生成文章的静态页面</li>
<li>所以直接在<code>Terminal</code>把文章<code>push</code>到我的<a href="https://github.com/heroicYang/heroicyang.com">Github</a>上即可，有版本管理真好</li>
<li>然后加之<code>Github Page</code>的支持，虽然有一些些小问题，比如<code>缓存</code>，但瑕不掩瑜</li>
<li>整个写作过程和写代码的过程是一致的，符合码农的行为习惯，也就是所谓的“像黑客一样写博客”</li>
</ol>
<p>这样，就只需要一个<code>Markdown</code>编辑器（推荐<a href="http://mouapp.com/">Mou</a>和<a href="http://www.sublimetext.com/2">Sublime Text 2</a>），再配合终端的<code>git</code>命令就OK了，其余的都不用管了，交给第三方去。比如：评论系统我就采用了国内的<a href="http://duoshuo.com/">多说</a>；然后用<a href="http://dropbox.com/">Dropbox</a>来保存文章中会用到的图片，因为<code>Dropbox</code>被<code>GFW</code>认证，所以再利用<a href="http://en.wikipedia.org/wiki/Nginx">Nginx</a>做个<a href="http://en.wikipedia.org/wiki/Reverse_proxy">反向代理</a>。一切都妥妥的了。  

</p>
<p>以前博客的那些废柴文章都不要了，不过还是做了个备份，算是纪念好了。而把近期写的3篇与<a href="http://heroicyang.com/blog/tags/javascript/">JavaScript</a>相关的文章转移了过来，重新开始技术博客的历程，见证成长。</p>
]]></content>
    <category scheme="http://heroicyang.com/tags/blog/" term="blog"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[JavaScript中创建类的方式]]></title>
    <link href="http://heroicyang.com/2012/08/19/create-class-in-javascript/"/>
    <id>http://heroicyang.com/2012/08/19/create-class-in-javascript/</id>
    <published>2012-08-18T17:05:00.000Z</published>
    <updated>2013-01-28T15:29:21.000Z</updated>
    <content type="html"><![CDATA[<p>现在<code>JavaScript</code>这门技术已经到了一个引爆点，一年前我对它的了解都只停留在肤浅的网页客户端脚本语言，只会简单的玩玩<code>jQuery</code>和<code>ExtJs</code>，其实都算不上开发者，而是一个<code>JavaScript</code>用户。但今年的目标是做一个合格的前端攻城湿，所以恶补是必须的。  

</p>
<p>在<code>JavaScript</code>中是其实不存在所谓“类”的概念，因为它并不是面向对象的语言。在面向对象中，一个最常见的说法就是：“类”是“对象”的模板，基本上都是采用语言内置的<code>Class</code>或<code>class</code>关键字来定义“类”。而<code>JavaScript</code>不存在这个概念，所以也没有提供类似的关键字（虽然<code>class</code>是<code>JavaScript</code>的关键字，但是至今都没有实现，只是被保留而已）。  

</p>
<p>因此，在<code>JavaScript</code>中创建类就唯有使用模拟的方式，而模拟的手法多种多样，何时采用何种方式最合适，需视情况而定。以下就记录下常见的几种模式。
<span id="more"></span>
</p>
<h3>一.工厂模式</h3>
<p>工厂方法是设计模式中非常基础的，也被广泛用于面向对象编程中。而在<code>JavaScript</code>中，通过工厂方法即能模拟出类的行为。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(name, sex, …)</span> {</span></div><div class="line">  <span class="keyword">var</span> obj = {};</div><div class="line">  obj.name = name;</div><div class="line">  obj.sex = sex;</div><div class="line">  …</div><div class="line">  obj.getName = <span class="keyword">function</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  };</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> personA = createPerson(<span class="string">'heroicYang'</span>, <span class="string">'male'</span>);</div><div class="line"><span class="keyword">var</span> personB = createPerosn(<span class="string">'路人甲'</span>, <span class="string">'male'</span>);</div></code></pre></td></tr></table></figure><br>通过这样类似的工厂方法，就可以创建出多个相似的对象了，但是这样的方式其抽象度极低。面向对象编程中，对象是可以检测出类型的，但是采用上面这种方式，是没有办法进行对象类型识别的。
</p>
<h3>二.构造函数模式</h3>
<p>其实，这应该是很常见的模式了，很多书上基本上一来就是讲这个的，更狠点的可能就只讲这个…
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, sex)</span> {</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sex = sex;</div><div class="line">  …</div><div class="line">  <span class="keyword">this</span>.getName = <span class="keyword">function</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  }</div><div class="line">}</div><div class="line"><span class="keyword">var</span> personA = <span class="keyword">new</span> Person(<span class="string">'heroic'</span>, <span class="string">'male'</span>);</div><div class="line"><span class="keyword">var</span> personB = <span class="keyword">new</span> Person(<span class="string">'路人甲'</span>, <span class="string">'male'</span>);</div></code></pre></td></tr></table></figure><br>这种模拟类方式的特点就是:

</p>
<ol>
<li>没有显示的创建对象   </li>
<li>直接将属性和方法赋给了<code>this</code>对象    </li>
<li>没有<code>return</code>字句</li>
</ol>
<p>在使用这种方式时，创建对象则必须使用<code>new</code>关键字。当然，好处就是完全解决了对象类型识别问题。
</p>
<h3>三.原型模式</h3>
<p>原型应该是<code>JavaScript</code>中一个很有意思，当然也是很有用的一个概念了。接下来用原型模式来模拟类。
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div></code></pre></td><td class="code"><pre><code><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> {</span>}</div><div class="line">Person.prototype = {</div><div class="line">  name: <span class="literal">null</span>,</div><div class="line">  sex: <span class="literal">null</span>,</div><div class="line">  getName: <span class="keyword">function</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  }</div><div class="line">};</div><div class="line"><span class="keyword">var</span> personA = <span class="keyword">new</span> Person;</div><div class="line">personA.name = <span class="string">'heroic'</span>;</div><div class="line">personA.sex = <span class="string">'male'</span>;</div><div class="line"><span class="keyword">var</span> personB = <span class="keyword">new</span> Person;</div><div class="line">personB.name = <span class="string">'路人甲'</span>;</div><div class="line">personB.sex = <span class="string">'male'</span>;</div></code></pre></td></tr></table></figure>
</p>
<h3>四.组合使用构造函数和原型模式</h3>
<p>由于只用原型模式的话，会带来一些问题，所以常规情况下，都是采用组合构造函数和原型模式来创建类，这也是使用率最高的一种方式。
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, sex)</span> {</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sex = sex;</div><div class="line">  …</div><div class="line">}</div><div class="line">Person.prototype.getName = <span class="keyword">function</span>() {</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">};</div><div class="line">…</div><div class="line"><span class="keyword">var</span> personA = <span class="keyword">new</span> Person(<span class="string">'heroic'</span>, <span class="string">'male'</span>);</div><div class="line"><span class="keyword">var</span> personB = <span class="keyword">new</span> Person(<span class="string">'路人甲'</span>, <span class="string">'male'</span>);</div><div class="line">personA.getName(); <span class="comment">//"heroic"</span></div><div class="line">personB.getName(); <span class="comment">//"路人甲"</span></div></code></pre></td></tr></table></figure>
</p>
<h3>五.寄生构造函数模式</h3>
<p>这种模式和工厂模式非常相似。
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> Array();</div><div class="line">  values.push.apply(values, arguments);</div><div class="line">    </div><div class="line">  values.toPipString = <span class="keyword">function</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">'|'</span>);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> values;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> SpecialArray(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>);</div><div class="line">test.toPipString(); <span class="comment">// "1|2|3"</span></div></code></pre></td></tr></table></figure><br>这种模式主要用来扩展一些对象的行为，而又不会对这个对象造成污染。当然，上面的代码也是可以直接为<code>Array.prototype</code>原型对象添加一个<code>toPipString()</code>方法来完成的，但是这样就造成了对<code>JavaScript</code>原生对象的污染。</p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/javascript-class/" term="javascript class"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Backbone之旅：前端MVC架构初体验（下）]]></title>
    <link href="http://heroicyang.com/2012/08/09/to-backbone-tutorial-2/"/>
    <id>http://heroicyang.com/2012/08/09/to-backbone-tutorial-2/</id>
    <published>2012-08-08T16:59:00.000Z</published>
    <updated>2013-01-28T15:27:24.000Z</updated>
    <content type="html"><![CDATA[<p>继<a href="http://heroicyang.com/blog/to-backbone-tutorial-1.html">《Backbone之旅：前端MVC架构初体验（上）》</a>，上篇中最后的代码已经完全达到最初提出的几点要求，现在就结合<code>Backbone</code>提供的能力，来继续精简代码。最后的目标就是将上篇中的代码全部重构为<code>Backbone</code>的<code>MVC</code>模式。  

</p>
<p>上篇中最后一次改造就已经使用到了<code>callback</code>的方式，所以我们索性再加上<code>Event</code>机制吧，因为<code>Backbone</code>内置了这个能力。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div><div class="line-number">35</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> events = _.clone(Backbone.Events);</div><br><div class="line"><span class="keyword">var</span> TodoList = <span class="keyword">function</span>(){};</div><br><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(options){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: options.todoContent },</div><div class="line">    success: options.success</div><div class="line">  });</div><div class="line">};</div><br><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">  $(<span class="string">'#new-todo form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><br><div class="line">  <span class="keyword">this</span>.todoList.add({</div><div class="line">    todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">    success: <span class="keyword">function</span>(data){</div><div class="line">      events.trigger(<span class="string">'todo:add'</span>, data.todoContent);</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><br><div class="line"><span class="comment">/*后面不变*/</span></div></code></pre></td></tr></table></figure><br>现在既然调用<code>add()</code>时传入的<code>success</code>属性已经完全不涉及到<code>DOM</code>操作了，而是单纯的事件触发，那完全可以把这个行为放置到<code>TodoList</code>原型的<code>add()</code>方法中去了，这样重用性更高。  

</p>
<p><span id="more"></span>
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(todoContent){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: todoContent },</div><div class="line">    success: <span class="keyword">function</span>(data){</div><div class="line">      events.trigger(<span class="string">'todo:add'</span>, data.todoContent);</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><div class="line"><span class="comment">/* … */</span></div><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><br><div class="line">  <span class="keyword">this</span>.todoList.add($(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val());</div><div class="line">};</div><div class="line"><span class="comment">/* … */</span></div></code></pre></td></tr></table></figure><br>接下来，咱看看在<code>NewTodoView</code>这个视图中事件订阅所触发的对应方法<code>appendTodo()</code>和<code>clearTextArea()</code>中，涉及到的是处在同一级别的不同的<code>DOM</code>元素节点，也就是说在<code>NewTodoView</code>这个视图中，我们处理了两个<code>DOM</code>元素，这似乎和我们之前提到的“单一职责原则”相违背了，所以还有待进一步的改进。  

</p>
<p>我们分别把新增<code>Todo</code>的视图和负责展示<code>Todo Item</code>的视图分开定义，使其符合“单一职责原则”。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* 前面不变 */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">  $(<span class="string">'#new-todo form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><br><div class="line">  <span class="keyword">this</span>.todoList.add($(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val());</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.clearTextArea = <span class="keyword">function</span>(){</div><div class="line">  $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">};</div><br><div class="line"><span class="comment">/* 用于展示Todo Item */</span></div><div class="line"><span class="keyword">var</span> TodoView = <span class="keyword">function</span>(){</div><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">};</div><br><div class="line">TodoView.prototype.appendTodo = <span class="keyword">function</span>(todoContent){</div><div class="line">  $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">};</div><br><div class="line"><span class="comment">/* 应用程序启动 */</span></div><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ todoList: todoList });</div><div class="line">  <span class="keyword">new</span> TodoView();</div><div class="line">});</div></code></pre></td></tr></table></figure><br>现在每个<code>View</code>里面只依赖一个顶层的<code>HTML Element</code>了，而在各自的<code>View</code>里面多次使用到了<code>$(&#39;#new-todo&#39;)</code>这样的代码，所以干脆将其在初始化的时候作为<code>View</code>的一个属性来提供吧。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* 前面依旧不变 */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><div class="line">  <span class="keyword">this</span>.el = $(<span class="string">'#new-todo'</span>);  <span class="comment">//定义一个el属性ß</span></div><br><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">  <span class="keyword">this</span>.el.find(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><br><div class="line">  <span class="keyword">this</span>.todoList.add(<span class="keyword">this</span>.el.find(<span class="string">'textarea'</span>).val());</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.clearTextArea = <span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">this</span>.el.find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">};</div><br><div class="line"><span class="keyword">var</span> TodoView = <span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">this</span>.el = $(<span class="string">'#todo-list'</span>);</div><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">};</div><br><div class="line">TodoView.prototype.appendTodo = <span class="keyword">function</span>(todoContent){</div><div class="line">  <span class="keyword">this</span>.el.find(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">};</div><div class="line"><span class="comment">/* 后面不变 */</span></div></code></pre></td></tr></table></figure><br>此时观察发现，两个<code>View</code>当中还保留着对<code>DOM</code>节点的依赖，其重用度依然不高，于是可采用实例化<code>View</code>的时候传入<code>el</code>参数来解决这个问题。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* 前面不变 */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><div class="line">  <span class="keyword">this</span>.el = options.el;</div><br><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">  <span class="keyword">this</span>.el.find(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><div class="line"><span class="comment">/* NewTodoView的原型方法也不变 */</span></div><br><div class="line"><span class="keyword">var</span> TodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.el = options.el;</div><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">};</div><div class="line"><span class="comment">/* TodoView的原型方法也不变 */</span></div><br><div class="line"><span class="comment">/* 初始化View的时候传入el */</span>	</div><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ el: $(<span class="string">'#new-todo'</span>), todoList: todoList });</div><div class="line">  <span class="keyword">new</span> TodoView({ el: $(<span class="string">'#todo-list'</span>) });</div><div class="line">});</div></code></pre></td></tr></table></figure><br><code>View</code>中我们频繁使用到了<code>jQuery</code>的<code>find()</code>方法来查找<code>View</code>所在<code>el</code>下面的子元素，所以可以考虑将这作为<code>View</code>的特性来提供，于是我们为<code>View</code>定义这样一个名叫<code>$</code>方法，然后替换掉<code>this.el.find()</code>这样的写法。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div><div class="line-number">35</div><div class="line-number">36</div><div class="line-number">37</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><div class="line">  <span class="keyword">this</span>.el = options.el;</div><br><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">  <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><br><div class="line">  <span class="keyword">this</span>.todoList.add(<span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val());</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.clearTextArea = <span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.$ = <span class="keyword">function</span>(selector){</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.el.find(selector);</div><div class="line">};</div><br><div class="line"><span class="keyword">var</span> TodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.el = options.el;</div><div class="line">  events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">};</div><br><div class="line">TodoView.prototype.appendTodo = <span class="keyword">function</span>(todoContent){</div><div class="line">  <span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">};</div><br><div class="line">TodoView.prototype.$ = <span class="keyword">function</span>(selector){</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.el.find(selector);</div><div class="line">};</div><div class="line"><span class="comment">/* … */</span></div></code></pre></td></tr></table></figure><br>上面的代码越来越多了，看上去好像咱是干的坏事，而不是往好的方向发展啊。是的，如果每个<code>View</code>都有很多自己的特性（方法），那向上面这样着实太痛苦了。看样子是时候请出<code>Backbone</code>提供的<code>View</code>特性了。OK，把我们自己的<code>View</code>转移到<code>Backbone</code>的。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div><div class="line-number">35</div><div class="line-number">36</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.todoList = options.todoList;</div><div class="line">    <span class="keyword">this</span>.el = options.el;</div><br><div class="line">    events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">    <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">  },</div><div class="line">  addTodo: <span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><br><div class="line">    <span class="keyword">this</span>.todoList.add(<span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val());</div><div class="line">  },</div><div class="line">  clearTextArea: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  },</div><div class="line">  $: <span class="keyword">function</span>(selector){</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.el.find(selector);</div><div class="line">  }</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.el = options.el;</div><div class="line">    events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">  },</div><div class="line">  appendTodo: <span class="keyword">function</span>(todoContent){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">  },</div><div class="line">  $: <span class="keyword">function</span>(selector){</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.el.find(selector);</div><div class="line">  }</div><div class="line">});</div><div class="line"><span class="comment">/* … */</span></div></code></pre></td></tr></table></figure><br>由于<code>Backbone</code>的<code>View</code>已经提供了我们实现的<code>$()</code>方法的能力，也叫<code>$</code>（这也是之前我们自己命名的原因）；同时<code>Backbone</code>的<code>View</code>也提供了<code>this.el</code>的能力，所以可以把它们从代码中显示的移除了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">    events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">    <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">  },</div><div class="line">  addTodo: <span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><br><div class="line">    <span class="keyword">this</span>.todoList.add(<span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val());</div><div class="line">  },</div><div class="line">  clearTextArea: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  }</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    events.on(<span class="string">'todo:add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">  },</div><div class="line">  appendTodo: <span class="keyword">function</span>(todoContent){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">  }</div><div class="line">});</div><div class="line"><span class="comment">/* 启动代码依然不变 */</span></div></code></pre></td></tr></table></figure><br>现在可以回过头来看看<code>ajax</code>那部分了，由于<code>Backbone</code>提供了<code>Model</code>的能力，这个就是用于和服务端打交道的，所以将长长的<code>ajax</code>代码改写为这一方式。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> Todo = Backbone.Model.extend({</div><div class="line">  url: <span class="string">'/add'</span></div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoList = <span class="keyword">function</span>(){};</div><br><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(todoContent){</div><div class="line">  <span class="keyword">var</span> todo = <span class="keyword">new</span> Todo();</div><div class="line">  todo.save({ todoContent: todoContent },{</div><div class="line">    success: <span class="keyword">function</span>(model, data){</div><div class="line">      events.trigger(<span class="string">'todo:add'</span>, data.todoContent);</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><div class="line"><span class="comment">/* … */</span></div></code></pre></td></tr></table></figure><br>同时，<code>Backbone</code>中还提供了一个<code>Collection</code>的概念，也就是<code>Model</code>的集合，比如我们这个案例中，每次创建单条的<code>Todo</code>，然后形成<code>Todo List</code>。当然，我们的任何数据都应该是以多条记录的方式存在的。所以，我们同时将上面的<code>TodoList</code>的实现改为<code>Collection</code>。  

</p>
<p>而且，<code>Backbone</code>的<code>Collection</code>已经支持了<code>Event</code>机制，所以我们也无需自定义<code>events</code>了，于是开头的<code>events</code>变量也一并移除了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div><div class="line-number">35</div><div class="line-number">36</div><div class="line-number">37</div><div class="line-number">38</div><div class="line-number">39</div><div class="line-number">40</div><div class="line-number">41</div><div class="line-number">42</div><div class="line-number">43</div><div class="line-number">44</div><div class="line-number">45</div><div class="line-number">46</div><div class="line-number">47</div><div class="line-number">48</div><div class="line-number">49</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> Todo = Backbone.Model.extend({</div><div class="line">  url: <span class="string">'/add'</span></div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoList = Backbone.Collection.extend({</div><div class="line">  add: <span class="keyword">function</span>(todoContent){</div><div class="line">    <span class="keyword">var</span> todo = <span class="keyword">new</span> Todo(),</div><div class="line">        that = <span class="keyword">this</span>;</div><div class="line">    todo.save({ todoContent: todoContent },{</div><div class="line">      success: <span class="keyword">function</span>(model, data){</div><div class="line">        that.trigger(<span class="string">'add'</span>, data.todoContent);</div><div class="line">      }</div><div class="line">    });</div><div class="line">  }</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> NewTodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">    <span class="keyword">this</span>.todoList.on(<span class="string">'add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">    <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">  },</div><div class="line">  addTodo: <span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><br><div class="line">    <span class="keyword">this</span>.todoList.add(<span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val());</div><div class="line">  },</div><div class="line">  clearTextArea: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  }</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.todoList = options.todoList;</div><div class="line">    <span class="keyword">this</span>.todoList.on(<span class="string">'add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">  },</div><div class="line">  appendTodo: <span class="keyword">function</span>(todoContent){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">  }</div><div class="line">});</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ el: $(<span class="string">'#new-todo'</span>), todoList: todoList });</div><div class="line">  <span class="keyword">new</span> TodoView({ el: $(<span class="string">'#todo-list'</span>), todoList: todoList });</div><div class="line">});</div></code></pre></td></tr></table></figure><br><code>Collection</code>提供了一个名叫<code>create()</code>的方法，其可以根据<code>Collection</code>的<code>Model</code>属性创建一个<code>Model</code>的实例，并执行<code>Model</code>的<code>save()</code>方法。所以我们的<code>TodoList</code>中的<code>add()</code>方法已经可以废去了。我们只需为<code>TodoList</code>提供<code>Model</code>属性的值即可，然后在<code>NewTodoView</code>的<code>addTodo()</code>方法中，替换<code>this.todoList.add()</code>方法为<code>this.todoList.create()</code>。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div></code></pre></td><td class="code"><pre><code><div class="line">	</div><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> TodoList = Backbone.Collection.extend({</div><div class="line">  model: Todo</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> NewTodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">    <span class="keyword">this</span>.todoList.on(<span class="string">'add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">    <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">  },</div><div class="line">  addTodo: <span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><br><div class="line">    <span class="keyword">this</span>.todoList.create({ todoContent: <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val() });  <span class="comment">//替换为create方法</span></div><div class="line">  },</div><div class="line">  clearTextArea: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  }</div><div class="line">});</div><div class="line"><span class="comment">/* … */</span></div></code></pre></td></tr></table></figure><br>这时，我们的<code>Model</code>、<code>Collection</code>、<code>View</code>都已经齐上阵了。由于<code>Backbone</code>的<code>View</code>已经内置<code>collection</code>属性，使得我们可以设置、获取<code>View</code>对应的<code>Collection</code>，所以我们完全无需手动在<code>View</code>的内部来定义一个<code>todoList</code>的变量了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/* … */</span></div><div class="line"><span class="keyword">var</span> NewTodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.collection.on(<span class="string">'add'</span>, <span class="keyword">this</span>.clearTextArea, <span class="keyword">this</span>);</div><br><div class="line">    <span class="keyword">this</span>.$(<span class="string">'form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">  },</div><div class="line">  addTodo: <span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><br><div class="line">    <span class="keyword">this</span>.collection.create({ todoContent: <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val() });</div><div class="line">  },</div><div class="line">  clearTextArea: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  }</div><div class="line">});</div><br><div class="line"><span class="keyword">var</span> TodoView = Backbone.View.extend({</div><div class="line">  initialize: <span class="keyword">function</span>(options){</div><div class="line">    <span class="keyword">this</span>.collection.on(<span class="string">'add'</span>, <span class="keyword">this</span>.appendTodo, <span class="keyword">this</span>);</div><div class="line">  },</div><div class="line">  appendTodo: <span class="keyword">function</span>(todo){</div><div class="line">    <span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todo.get(<span class="string">'todoContent'</span>) + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">  }</div><div class="line">});</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ el: $(<span class="string">'#new-todo'</span>), collection: todoList });</div><div class="line">  <span class="keyword">new</span> TodoView({ el: $(<span class="string">'#todo-list'</span>), collection: todoList });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>至此，完整的基于<code>Backbone</code>的<code>Model</code>、<code>Collection</code>、<code>View</code>模式就构建好了。如果说还有什么瑕疵的话，应该就是一些表层功夫了，那就是咱们的<code>HTML Element</code>的<code>append</code>了，需要做一些过滤，比如用户输入<code>JavaScript</code>代码那就糟糕了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todo.get(<span class="string">'todoContent'</span>) + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">调整为</div><div class="line"><span class="keyword">this</span>.$(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todo.escape(<span class="string">'todoContent'</span>) + <span class="string">'&lt;/li&gt;'</span>);</div></code></pre></td></tr></table></figure><br>这样就Perfect了。文章忒长了点，但是为了从一个<code>0</code>变成一个<code>1</code>，我想应该还是很有意思的。</p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/backbone/" term="backbone"/>
    <category scheme="http://heroicyang.com/tags/mvc/" term="mvc"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Backbone之旅：前端MVC架构初体验（上）]]></title>
    <link href="http://heroicyang.com/2012/08/08/to-backbone-tutorial-1/"/>
    <id>http://heroicyang.com/2012/08/08/to-backbone-tutorial-1/</id>
    <published>2012-08-07T16:48:00.000Z</published>
    <updated>2013-01-28T15:27:46.000Z</updated>
    <content type="html"><![CDATA[<p>最近一段时间来，才算是真正的开始深入学习<code>JavaScript</code>，收获颇丰。也首次领略了前端<code>MVC</code>架构的风采，现在前端<code>MVC</code>的类库和框架越来越多，在经过初步的评估之后，决定先学习备受推崇的<code>Backbone</code>。 

</p>
<p>以前自己做的一些<code>Web</code>应用，基本上都是按照非常传统的方式：1.服务器端渲染模板；2.利用<code>jQuery</code>的<code>ajax</code>进行异步数据交换。所以首次接触前端架构类的东西，难免有点无从下手。经过几天的奋战，以及参阅国外大牛们的各种<code>Tutorial</code>之后，终于拨开迷雾，缕了些头绪，自己也试着从传统的方式过渡（重构）出了所谓的架构性的代码。  

</p>
<p>整个重构的过程让我受益良多，所以决定再认真的记录一遍，加深自己的印象，也再确认一遍自己是否真的搞明白了，文章应该会比较长。  

</p>
<span id="more"></span>

<p>首先，先上一段所谓的传统式的代码。
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div></code></pre></td><td class="code"><pre><code><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  $(<span class="string">'#new-todo form'</span>).submit(<span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><br><div class="line">    $.ajax({</div><div class="line">      url: <span class="string">'/add'</span>,</div><div class="line">      type: <span class="string">'POST'</span>,</div><div class="line">      dataType: <span class="string">'json'</span>,</div><div class="line">      data: { todoContent: $(<span class="keyword">this</span>).find(<span class="string">'textarea'</span>).val() },</div><div class="line">      success: <span class="keyword">function</span>(data){</div><div class="line">        $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">        $(that).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">      }</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>另外，也上一张关于这篇文章中涉及到的<code>HTML</code>结构图，方便参照。由于文章稍长，我想如果直接在这里插图的话会影响阅读，所以就只给出<a href="http://img.heroicyang.com/to-backbone-tutorial.png">图片链接</a>了。 

</p>
<p>上面的一段代码我想应该都是大家非常熟悉的做法，因为我是一个伪前端攻城湿，所以我以前的代码中无不充斥着类似的、一堆一堆这样的代码。看上去貌似挺好的啊，也没啥问题，程序跑得倍儿棒。但是就这么短短的一段代码，它可干了不少事情：监听页面事件、用户事件、网络事件，接收用户的输入、执行网络的I/O、解析服务端返回的数据、动态生成<code>HTML</code>结构，可谓是包罗万象啊，就这么短短的一段代码就解释了整个<code>Web</code>应用程序的本质。  

</p>
<p>所以即便是这么一个小小的应用，逻辑和架构上都已经臃肿了，完全违反了咱们软件开发中的“单一职责原则”。如果是一个大应用，那估计就如乱麻------剪不断理还乱了。所以，改变迫在眉睫。 

</p>
<p>确实咱的要求也不高，如果把它搞成这样，其实咱就满足了：

</p>
<ol>
<li>在<code>$(document).ready</code>当中只保留一些应用程序的初始化代码即可，即应用的启动程序。  </li>
<li>干掉乱如麻的逻辑，使得其符合咱们的“单一职责原则”，方便测试。  </li>
<li>减小<code>ajax</code>和<code>DOM</code>的耦合，其实也算是第2条。  </li>
</ol>
<p>OK，动手。按照最基本的重构方式，咱先把<code>ajax</code>分离到一个方法里面去。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> addTodo = <span class="keyword">function</span>(){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val() },</div><div class="line">    success: <span class="keyword">function</span>(data){</div><div class="line">      $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">      $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  $(<span class="string">'#new-todo form'</span>).submit(<span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><div class="line">    </div><div class="line">    addTodo();</div><div class="line">  });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>但是，在<code>ajax</code>所在的方法中，<code>data</code>和<code>success</code>属性仍然保留了对<code>DOM</code>的依赖，于是接下来将其调整为函数的参数来传递。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> addTodo = <span class="keyword">function</span>(options){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: options.todoContent },</div><div class="line">    success: options.success</div><div class="line">  });</div><div class="line">};</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  $(<span class="string">'#new-todo form'</span>).submit(<span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><div class="line">    </div><div class="line">    addTodo({</div><div class="line">      todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">      success: <span class="keyword">function</span>(data){</div><div class="line">        $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">        $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">      }</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>好像OK了，不过此时<code>addTodo()</code>方法暴露在全局环境内，任何人都可以呼之欲来。我可不想当屌丝，作为一个富有上进心的、想成为一个合格前端攻城湿的我，还是给<code>addTodo()</code>方法加个命名空间吧。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> TodoList = <span class="keyword">function</span>(){};</div><br><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(options){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: options.todoContent },</div><div class="line">    success: options.success</div><div class="line">  });</div><div class="line">};</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><br><div class="line">  $(<span class="string">'#new-todo form'</span>).submit(<span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><div class="line">    </div><div class="line">    todoList.add({</div><div class="line">      todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">      success: <span class="keyword">function</span>(data){</div><div class="line">        $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">        $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">      }</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>现在<code>submit</code>事件只依赖一个<code>todoList</code>变量了，而且最重要的是现在的<code>submit</code>事件中只关注<code>DOM</code>操作了，干脆大刀阔斧的把它移到外层去。于是咱们引入视图<code>View</code>了。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> TodoList = <span class="keyword">function</span>(){};</div><br><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(options){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: options.todoContent },</div><div class="line">    success: options.success</div><div class="line">  });</div><div class="line">};</div><br><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">var</span> todoList = options.todoList;</div><br><div class="line">  $(<span class="string">'#new-todo form'</span>).submit(<span class="keyword">function</span>(e){</div><div class="line">    e.preventDefault();</div><div class="line">    </div><div class="line">    todoList.add({</div><div class="line">      todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">      success: <span class="keyword">function</span>(data){</div><div class="line">        $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">        $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">      }</div><div class="line">    });</div><div class="line">  });</div><div class="line">};</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ todoList: todoList });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>恩，现如今<code>$(document).ready</code>中就简洁得只剩我们之前所说的应用启动代码了。虽然代码已经组件化了，也工作得很好，但是仍然有需要重构的地方。<code>NewTodoView</code>目前看上去都不怎么像一个对象的行为，所以继续重构之。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div><div class="line-number">23</div><div class="line-number">24</div><div class="line-number">25</div><div class="line-number">26</div><div class="line-number">27</div><div class="line-number">28</div><div class="line-number">29</div><div class="line-number">30</div><div class="line-number">31</div><div class="line-number">32</div><div class="line-number">33</div><div class="line-number">34</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="keyword">var</span> TodoList = <span class="keyword">function</span>(){};</div><br><div class="line">TodoList.prototype.add = <span class="keyword">function</span>(options){</div><div class="line">  $.ajax({</div><div class="line">    url: <span class="string">'/add'</span>,</div><div class="line">    type: <span class="string">'POST'</span>,</div><div class="line">    dataType: <span class="string">'json'</span>,</div><div class="line">    data: { todoContent: options.todoContent },</div><div class="line">    success: options.success</div><div class="line">  });</div><div class="line">};</div><br><div class="line"><span class="keyword">var</span> NewTodoView = <span class="keyword">function</span>(options){</div><div class="line">  <span class="keyword">this</span>.todoList = options.todoList;</div><br><div class="line">  $(<span class="string">'#new-todo form'</span>).submit($.proxy(<span class="keyword">this</span>.addTodo, <span class="keyword">this</span>));</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><div class="line">    </div><div class="line">  <span class="keyword">this</span>.todoList.add({</div><div class="line">    todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">    success: <span class="keyword">function</span>(data){</div><div class="line">      $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + data.todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">      $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><br><div class="line">$(<span class="keyword">function</span>(){</div><div class="line">  <span class="keyword">var</span> todoList = <span class="keyword">new</span> TodoList();</div><div class="line">  <span class="keyword">new</span> NewTodoView({ todoList: todoList });</div><div class="line">});</div></code></pre></td></tr></table></figure><br>这里用到了<code>jQuery</code>中的<code>$.proxy()</code>方法来解决<code>this</code>作用域的问题，玩<code>JavaScript</code>的童鞋们应该都很了解作用域这个东东。接下来，咱干点有关洁癖的事情，鉴于要保证代码的清晰、方便阅读，咱把<code>success</code>里面的行为采用<code>callback</code>的形式来完成。  
</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><code><div class="line-number">1</div><div class="line-number">2</div><div class="line-number">3</div><div class="line-number">4</div><div class="line-number">5</div><div class="line-number">6</div><div class="line-number">7</div><div class="line-number">8</div><div class="line-number">9</div><div class="line-number">10</div><div class="line-number">11</div><div class="line-number">12</div><div class="line-number">13</div><div class="line-number">14</div><div class="line-number">15</div><div class="line-number">16</div><div class="line-number">17</div><div class="line-number">18</div><div class="line-number">19</div><div class="line-number">20</div><div class="line-number">21</div><div class="line-number">22</div></code></pre></td><td class="code"><pre><code><div class="line"><span class="comment">/*前面不变*/</span></div><div class="line">NewTodoView.prototype.addTodo = <span class="keyword">function</span>(e){</div><div class="line">  e.preventDefault();</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><br><div class="line">  <span class="keyword">this</span>.todoList.add({</div><div class="line">    todoContent: $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(),</div><div class="line">    success: <span class="keyword">function</span>(data){</div><div class="line">      that.appendTodo(data.todoContent);</div><div class="line">      that.clearTextArea();</div><div class="line">    }</div><div class="line">  });</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.appendTodo = <span class="keyword">function</span>(todoContent){</div><div class="line">  $(<span class="string">'#todo-list ul'</span>).append(<span class="string">'&lt;li&gt;'</span> + todoContent + <span class="string">'&lt;/li&gt;'</span>);</div><div class="line">};</div><br><div class="line">NewTodoView.prototype.clearTextArea = <span class="keyword">function</span>(){</div><div class="line">  $(<span class="string">'#new-todo'</span>).find(<span class="string">'textarea'</span>).val(<span class="string">''</span>);</div><div class="line">};</div><div class="line"><span class="comment">/*后面也不变*/</span></div></code></pre></td></tr></table></figure><br>至此，重构的第一个版本其实就算得上大功告成了，已经达到前面提出的三大方针政策。文章果然比较长，所以我决定还是分成了上、下两节，当前这篇中完全没涉及到<code>backbone</code>，所以到此就打住了，敬请关注下回分解。</p>
]]></content>
    <category scheme="http://heroicyang.com/tags/javascript/" term="javascript"/>
    <category scheme="http://heroicyang.com/tags/backbone/" term="backbone"/>
    <category scheme="http://heroicyang.com/tags/mvc/" term="mvc"/>
  </entry>
</feed>
